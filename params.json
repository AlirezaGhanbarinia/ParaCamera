{
  "name": "PlaceHolderView",
  "tagline": "Simple, Fast, Modular and Build on top of Android RecyclerView",
  "body": "#**PlaceHolderView**\r\n![](https://janishar.github.io/images/logo-phv.png)\r\n\r\n######Simple, Easy and Superfast dynamic view creation with Awesome animations prebuilt!\r\n\r\n##Few Implementations\r\n![](https://janishar.github.io/gifs/vid_drawer.gif)  ![](https://janishar.github.io/gifs/vid_slides.gif)\r\n\r\n![](https://janishar.github.io//gifs/vid_fade.gif)   ![](https://janishar.github.io//gifs/feed_vid.gif)\r\n\r\n##STEP 1: Define a PlaceHolderView inside XML layout\r\n```java\r\n//PlaceHolderView to wrap around the recycler view in XML\r\n<com.mindorks.placeholderview.PlaceHolderView\r\n        android:id=\"@+id/galleryView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"/>\r\n\r\n```\r\n##STEP 2: Create item views XML, example: gallery_item_big.xml\r\n```java\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:padding=\"10dp\">\r\n    <android.support.v7.widget.CardView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:cardCornerRadius=\"6dp\"\r\n        app:cardElevation=\"6dp\">\r\n        <ImageView\r\n            android:id=\"@+id/imageView\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"250dp\"\r\n            android:scaleType=\"centerCrop\"\r\n            android:src=\"@android:color/holo_orange_dark\"/>\r\n    </android.support.v7.widget.CardView>\r\n</LinearLayout>\r\n```\r\n##STEP 3: Create item class to bind and define view operations\r\n```java\r\n@Animate(Animation.ENTER_LEFT_DESC)\r\n@NonReusable\r\n@Layout(R.layout.gallery_item_big)\r\npublic class ImageTypeBig {\r\n\r\n    @View(R.id.imageView)\r\n    private ImageView imageView;\r\n\r\n    private String mUlr;\r\n    private Context mContext;\r\n    private PlaceHolderView mPlaceHolderView;\r\n\r\n    public ImageTypeBig(Context context, PlaceHolderView placeHolderView, String ulr) {\r\n        mContext = context;\r\n        mPlaceHolderView = placeHolderView;\r\n        mUlr = ulr;\r\n    }\r\n\r\n    @Resolve\r\n    private void onResolved() {\r\n        Glide.with(mContext).load(mUlr).into(imageView);\r\n    }\r\n\r\n    @LongClick(R.id.imageView)\r\n    private void onLongClick(){\r\n        mPlaceHolderView.removeView(this);\r\n    }\r\n\r\n}\r\n```\r\n\r\n##STEP 4 : Add views to the PlaceHolderView\r\n```java\r\n \r\n PlaceHolderView mGalleryView = (PlaceHolderView)findViewById(R.id.galleryView);\r\n\r\n// (Optional): If customisation is Required then use Builder with the PlaceHolderView\r\n// placeHolderView.getBuilder()\r\n//      .setHasFixedSize(false)\r\n//      .setItemViewCacheSize(10)\r\n//      .setLayoutManager(new GridLayoutManager(this, 3));\r\n\r\n  mGalleryView\r\n        .addView(new ImageTypeBig(this.getApplicationContext(), mGalleryView, url1));\r\n        .addView(new ImageTypeBig(this.getApplicationContext(), mGalleryView, url2));\r\n        .addView(new ImageTypeBig(this.getApplicationContext(), mGalleryView, url3));\r\n        .addView(new ImageTypeBig(this.getApplicationContext(), mGalleryView, url4));\r\n```\r\n##*That's All! Cheers!* :beer:\r\n\r\n#NOTES:\r\n\r\n##PlaceHolderView\r\n1. getBuilder(): Get builder for the PlaceHolderView to modify the default properties\r\n2. setLayoutManager(layoutManager): Add custom layout manager\r\n3. addView(): Add views to the PlaceHolderView\r\n4. removeView(): Removes the existing view\r\n5. SmoothLinearLayoutManager: This class is bundled with the library, and should be used for those view which has dynamic heavy contents. It reduces the screen flikering on bind\r\n\r\n##Annotations\r\n1. @Layout: Bind the XML layout with the class.\r\n2. @View: Bind the variable with the view defined in the above layout.\r\n3. @Click: Bind the OnClickListener to a view.\r\n4. @LongClick: Bind the long click listerner to a view.\r\n5. @Resolve: Any operation being performed on the view reference defined by @View should be annotated with this.\r\n6. @Animate(Animation.ENTER_LEFT_DESC): Sets the defined animations in the Animation class on this item view.\r\n7. @NonReusable: Releases the view reference along with all the attached references in the view object. This view object should not be used again in the addView().\r\n\r\n##ExpandablePlaceHolderView\r\n####This class is build upon the PlaceHolderView and implements all the features of ExpandableListView but with much power and lot easier\r\n\r\n##Annotations(ExpandablePlaceHolderView)\r\n1. @Parent: Defines the class to be used as the parent in the expandable list.\r\n2. @SingleTop: Makes only one parent remain in expanded state.\r\n3. @Collapse: Bind a method of the parent class to listen to the collapse event.\r\n4. @Expand: Bind a method of the parent class to listen to the Expand event.\r\n5. @ParentPosition: Bind an int variable to update with relative position among parents.\r\n6. @ChildPosition: Bind an int variable to update with relative position among children of a parent.\r\n7. @Toggle: Bind a view to be used as a trigger for expanding or collapsing a parent view. If not provided then the parent view becomes a toggle by default.\r\n\r\n##There is no adapter configuration required\r\n\r\n#Gradle\r\n```java\r\ndependencies {\r\n    compile 'com.mindorks:placeholderview:0.0.3'\r\n}\r\n```\r\n#Dependency: It depends on the RecyclerView\r\n```java\r\n    com.android.support:recyclerview-v7:23.+\r\n```\r\n\r\n###If this library helps you in anyway, show your love :heart: by putting a :star: on this project :v:\r\n\r\n#Examples\r\n[Android Navigation Drawer](https://medium.com/@janishar.ali/navigation-drawer-android-example-8dfe38c66f59#.vmlw4zb00)\r\n\r\n[Android Beginner Image Gallery](https://medium.com/@janishar.ali/android-beginner-image-gallery-example-da73a596f4d5#.p42z8w83o)\r\n\r\n[Android Advance Image Gallery](https://medium.com/@janishar.ali/android-advance-image-gallery-example-3ec6ddf85ed9#.6n8ouof9k)\r\n\r\n[Android Expandable News Feed](https://medium.com/@janishar.ali/android-expandable-news-feed-example-4b4544e1fe7e#.3n9k18x2s)\r\n\r\n#License\r\n\r\n```\r\n   Copyright (C) 2016 Janishar Ali Anwar\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}